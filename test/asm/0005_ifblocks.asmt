## CODE

func foo(a, b)
{
  if (a)
  {
    if (b)
    {
      print("a && b");
    }
    else
    {
      print("a && !b");
    };
  }
  else
  {
    if (b)
    {
      print("!a && b");    
    }
    else
    {
      print("!a && !b");
    };
  };
}

## OPTIONS



## EXPECT

/* 0            */               CONSTANT_STRING "!a && !b"
/* 1            */               CONSTANT_STRING "!a && b"
/* 2            */               CONSTANT_STRING "a && !b"
/* 3            */               CONSTANT_STRING "a && b"
 
/*              */               LOAD_FUNCTION L10, foo, -1
 
/*              */               BREAK_LOAD 
 
/*              */ L10         : STACK_RESERVE 0
/*              */ L0          : PUSH_ARG 0
/*              */               JMP_IF L2
/*              */               JMP L3
/*              */ L2          : PUSH_ARG 1
/*              */               JMP_IF L5
/*              */               JMP L6
/*              */ L3          : PUSH_ARG 1
/*              */               JMP_IF L8
/*              */               JMP L9
/* a  b         */ L5          : PUSH_CONSTANT 3
/*              */               KERNELCALL 0
/*              */               JMP L1
/* a  b         */ L6          : PUSH_CONSTANT 2
/*              */               KERNELCALL 0
/*              */               JMP L1
/* a  b         */ L8          : PUSH_CONSTANT 1
/*              */               KERNELCALL 0
/*              */               JMP L1
/* a  b         */ L9          : PUSH_CONSTANT 0
/*              */               KERNELCALL 0
/*              */ L1          : PUSH_NIL 
/*              */               RETURN 1
